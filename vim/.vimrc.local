set tabstop=2
set shiftwidth=2
set softtabstop=2
" set cursorcolumn

" remove indent highlighting
let g:indent_guides_enable_on_vim_startup = 0

" CtrlSF
nmap <C-a> <Plug>CtrlSFPrompt
vmap <C-A> <Plug>CtrlSFVwordExec
nnoremap <C-j> :CtrlSFOpen<CR>

" copy
set clipboard=unnamed

" TypeScript
" autocmd BufRead,BufNewFile *.ts set filetype=typescript

" write current buffer and destroy
nnoremap <C-b> :bd<CR>

" auto open quick fix buffer after using git log
" autocmd QuickFixCmdPost *grep* cwindow

" igore syntastic html errors
let g:syntastic_html_tidy_ignore_errors=["<ion-", "<template", "discarding unexpected </ion-", "discarding unexpected </template", "plain text isn't allowed in <head> elements", " proprietary attribute \"ng-"]

" jsx syntax highlighting for js files
let g:jsx_ext_required = 0

" paste without overwriting last yank
vnoremap P "_dp
vnoremap p "_dP

" vim wiki
" Toggle checkbox of a list item on/off
nmap <leader>wl <Plug>VimwikiToggleListItem
" 标记为完成的 checklist 项目会有特别的颜色
let g:vimwiki_hl_cb_checked = 1
" 是否在计算字串长度时用特别考虑中文字符
let g:vimwiki_CJK_length = 1
" 设置完成的标记符号
let g:vimwiki_listsyms = '✗.○●✓'
" 可以导出markdown?"
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" set startify
" let g:startify_list_order = [
"             \ ['   My most recently used files in the current directory:'],
"             \ 'dir',
"             \ ['   These are my sessions:'],
"             \ 'sessions',
"             \ ['   These are my bookmarks:'],
"             \ 'bookmarks',
"             \ ]
"
" change your header by
" http://patorjk.com/software/taag/#p=display&h=1&f=Standard&t=Hi%20%20Zed
" let g:startify_custom_header = [
"             \ '     _   _  _    _____          _  ',
"             \ '    | | | |(_)  |__  / ___   __| | ',
"             \ '    | |_| || |    / / / _ \ / _` | ',
"             \ '    |  _  || |   / /_|  __/| (_| | ',
"             \ '    |_| |_||_|  /____|\___| \__,_| ',
"             \ '',
"             \ '',
"             \ ]
"
" let g:startify_bookmarks = [ {'v': '~/.vimrc'}, '~/.zshrc' ]

" add a space between the comment delimiter
let g:NERDSpaceDelims=1

" vim-pencil configs
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END
let g:pencil#wrapModeDefault = 'soft'

" ctrlp mappings
nnoremap <space>p :CtrlP<CR>
nnoremap <space>r :CtrlPMRU<CR>
nnoremap <space>b :CtrlPBuffer<CR>

" f*cking vim markdown auto folding
set nofoldenable
let g:vim_markdown_folding_disabled=1

" set diff views vertical
set diffopt+=vertical

" set mapping for gitv
nnoremap <silent> <leader>gv :Gitv --all<CR>
nnoremap <silent> <leader>gV :Gitv! --all<CR>

" Unite settings
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_reverse'])
" call unite#custom#source('file_mru,file_rec,file_rec/async,grep,locate',
  " \ 'ignore_pattern', 'bower_components\|node_modules\|dist\|tmp\|platforms')

" replacing unite with ctrl-p
let g:unite_data_directory='~/.vim/.cache/unite'
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
let g:unite_enable_start_insert = 1
let g:unite_source_history_yank_enable = 1
let g:unite_split_rule = 'botright'
let g:unite_prompt = '> '
let g:unite_winheight = 15
let g:unite_update_time = 1000
autocmd FileType unite call s:unite_my_settings()
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
    \ '-i --vimgrep --smart-case --nocolor --nogroup ' .
    \ '--ignore ''.svn'' --ignore ''.git'' --ignore ''.cabal-sandbox'' --ignore ''.stack-work'''
  let g:unite_source_grep_recursive_opt = ''
  " this settings sucks
  let g:unite_source_rec_async_command =
    \ 'ag %s --nocolor --nogroup --ignore ".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr" -l -g ""'
endif
function! s:unite_my_settings()
  " Overwrite settings.
  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <C-j> <Plug>(unite_select_next_line)
  imap <buffer> <C-k> <Plug>(unite_select_previous_line)

  " imap <silent><buffer><expr> <C-s> unite#do_action('split')
  " imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  " imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
endfunction

" nnoremap <silent> <c-p> :Unite -auto-resize file_rec/async<cr>
nnoremap <space>y :Unite -auto-resize history/yank<cr>
nnoremap <space>m :Unite mapping<cr>
" nnoremap <space>b :Unite -quick-match buffer<cr>
" nnoremap <space>r :Unite -auto-resize file_mru<cr>
"
" calendar settings
" nnoremap <space>c :Calendar -position=topright <cr>
" stop use google calendar because of GFW
" let g:calendar_google_calendar = 1

" unload all buffers but the current one.
nnoremap <leader>bd :BufOnly<cr>
" cd current directory
nnoremap <leader>cd :cd %:p:h<cr>
" open current file with Marked 2
nnoremap <leader>ma :!open -a "Marked 2" %<cr><CR>

" search for visually selected text
vnoremap // y/<C-R>"<CR>"
